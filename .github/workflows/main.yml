name: ShirokoNekoKernel

env:
  TZ: Asia/Shanghai
  CPU: 'sm8475'
  FEIL: 'redmi+xiaomi'
  ANDROID_VERSION: 'android12'
  KERNEL_VERSION: '5.10'
  KERNEL_NAME: 'Xinran_StarBai-diting'
  KERNELSU_VARIANT: 'SukiSU-Ultra'
  KERNELSU_BRANCH: 'susfs-main'

on:
  workflow_dispatch:
    inputs:
      kernel_suffix:
        description: '内核后缀(留空默认,开头别加连字符)'
        required: false
        type: string
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      ksuver: ${{ steps.ksu_version.outputs.ksuver }}
    steps:
      - name: 最大化建筑空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          
      - name: Show selected inputs debug
        run: |
          echo "Selected scx_enable: ${{ github.event.inputs.scx_enable }}"
          echo "Selected lz4k: ${{ github.event.inputs.lz4k_enable }}"
          
      - name: 安装配置环境依赖
        run: |
          sudo apt update
          # sudo apt upgrade -y
          sudo apt install llvm clang cmake
          sudo apt-get install curl bison flex make binutils dwarves git lld pahole zip perl make gcc python3 python-is-python3 bc libssl-dev libelf-dev -y
          
      - name: Install repo tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo
          
      - name: 初始化源码仓库
        run: |
          rm -rf kernel_workspace && mkdir kernel_workspace && cd kernel_workspace
          repo init --depth 1 -u https://android.googlesource.com/kernel/manifest -b common-android12-5.10
          repo sync -c -j$(nproc --all) --no-tags --no-clone-bundle --force-sync
          rm -rf common
          echo "正在克隆源码仓库..."
          git clone --depth=1 https://github.com/Winkmoon/k50u_kernel_xiaomi_sm8475.git common -b main
          echo "正在去除 ABI 保护 & 去除 dirty 后缀..."
          rm common/android/abi_gki_protected_exports_* || echo "不需要去除保护"
          for f in common/scripts/setlocalversion; do
            sed -i 's/ -dirty//g' "$f"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$f"
          done
      - name: 添加 ksu
        id: ksu_version
        run: |
          cd kernel_workspace/common
          rm -rf KernelSU
          curl -LSs "https://raw.githubusercontent.com/Winkmoon/KernelSU-Next/next/kernel/setup.sh" | bash -s next
          cd KernelSU-Next
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 10200)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=16/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          cd ..
      - name: 应用 SUSFS 修补程序
        run: |
          cd kernel_workspace
          git clone https://github.com/ShirkNeko/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
          cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          cp ./SukiSU_patch/hooks/new_hooks.patch ./common/
          cd ./common
          patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
          patch -p1 < new_hooks.patch
      - name: 应用 Hide Stuff 修补程序（未定义）
        run: |
          cd kernel_workspace/common
          cp ../SukiSU_patch/69_hide_stuff.patch ./
          patch -p1 < 69_hide_stuff.patch
          
      - name: 添加 SUSFS 配置设置
        run: |
          cd kernel_workspace
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          if [[ "${{ github.event.inputs.lz4k_enable }}" == "true" ]]; then
            echo "CONFIG_ZSMALLOC=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
            echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
            echo "CONFIG_CRYPTO_LZ4K=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
            echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
            echo "CONFIG_CRYPTO_842=y" >> ./common/arch/arm64/configs/vendor/diting_defconfig
          fi
          #禁用 defconfig 检查
          sed -i 's/check_defconfig//' ./common/build.config.gki
      - name: 添加制作名称
        run: |
          cd kernel_workspace
          echo "替换内核版本后缀..."
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            echo "当前内核版本后缀：${{ github.event.inputs.kernel_suffix }}"
            for f in ./common/scripts/setlocalversion; do
              sed -i "\$s|echo \"\\\$res\"|echo \"-${{ github.event.inputs.kernel_suffix }}\"|" "$f"
            done
          else
            echo "当前内核版本后缀：${{ env.KERNEL_NAME }}"
            for f in ./common/scripts/setlocalversion; do
              sed -i "\$s|echo \"\\\$res\"|echo \"-${{ env.KERNEL_NAME }}\"|" "$f"
            done
          fi
           
      - name: 构建内核
        run: |
          cd kernel_workspace
          export KBUILD_BUILD_USER=XinRan
          export KBUILD_BUILD_HOST=只爱自己
          export LTO=thin SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0
          export KCONFIG_CONFIG=vendor/diting_defconfig
          BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh || echo "完毕"
         
      - name: 应用patch_linux并修补内核（
        run: |
          cd kernel_workspace/out/android12-5.10/common/arch/arm64/boot
          curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
          
      - name: 克隆 AnyKernel3 并打包
        run: |
         cd kernel_workspace
         git clone https://github.com/Winkmoon/AnyKernel3 --depth=1
         rm -rf ./AnyKernel3/.git
         for i in $(find . -name Image); do
         echo "复制 Image 文件: $i"
         cp "$i" AnyKernel3/
         done
         cd AnyKernel3
         ZIPNAME="AnyKernel3_SukiSU_${{ env.KSUVER }}_${{ env.KERNEL_VERSION }}.zip"
         zip -r "../$ZIPNAME" ./*
      - name: 上传 ZIP 工件
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: kernel_workspace/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
      
    steps:
      - name: 下载 ZIP 工件
        uses: actions/download-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ./release_zips

      - name: 设置环境变量
        run: |
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            FULL_VERSION=${{ format('{0}.57-{1}', env.KERNEL_VERSION, github.event.inputs.kernel_suffix) }}
            echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
            export FULL_VERSION=$FULL_VERSION
          else
            FULL_VERSION=${{ format('{0}.57-{1}', env.KERNEL_VERSION, env.KERNEL_NAME) }}
            echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
            export FULL_VERSION=$FULL_VERSION
          fi
          TIME="$(TZ='Asia/Shanghai' date +'%y%m%d%H%M%S')"
          TIME_FORM="$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
          echo "TIME=$TIME" >> $GITHUB_ENV
          echo "TIME_FORM=$TIME_FORM" >> $GITHUB_ENV
          TAG_HEAD="xiaomi"
          echo "TAG_HEAD=$TAG_HEAD" >> $GITHUB_ENV
